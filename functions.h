#pragma once

typedef enum { false, true } bool;

/*
* Подсчитывает количество четных цифр в числе.
* @param t_ - Число, в котором нужно подсчитать цифры.
* @return - Количество четных цифр в числе.
*/
int EvenCount(int t_);

/*
* Подсчитывает количество простых числе <= x
* @param x_ - исходное число.
* @return Возвращает количество простых чисел.
*/
int PI(int x_);

/*
* Говорит является ли число простым.
*/
bool IsPrime(int number_);

/*
* Функция Эйлера.
* @param x_ - входное целое число.
* @result Подсчитывает количество чисел взаимно простых с x_.
*/
int FI(int x_);

/*
* Находит НОД по модулю.
* @param a - первое число.
* @param b - второе число.
* @return Наибольший общий делитель a и b.
*/
int Gcd(int a, int b);

/*
* Считает факториал числа.
* @param x_ - целое число.
* @return Факториал числа.
*/
unsigned long long Fact(int x_);

/*
* Считает произведение чисел на основе правила:
* Если число - четное, то произведение четных чисел до него.
* Иначе - нечетное произведение.
* @param x_ - целое число.
* @return Произведение четных, либо нечетных чисел последовательности.
*/
unsigned long long DFact(int x_);

/*
* Задача из проекта Эйлера №2: Найти сумму всех четных элементов ряда Фибоначчи,
* которые не превышают x_.
* @param x_ - целое число.
* @return Сумма четных элементов ряда Фибоначчи.
*/
unsigned long long Euler_2(int x_);

/*
* Возвращает n-й член ряда Фибоначчи.
*/
unsigned long long Fib(int n_);

/*
* Считает сумму всех четных элементов ряда Фибоначчи,
* которые не превышают 4 миллиона.
*/
int SumFib();